Justificaciones – TP Comunicándonos

	Para el desarrollo de este TP implementamos código, pseudo-código y declaración de algunas variables para poder comunicar de manera más eficiente lo plasmado en el Diagrama de Clases.
	Además, hicimos uso de tres patrones de diseño en nuestro trabajo:
	1-	Patrón State: fue aplicado a la hora de implementar los trayectos y sus distintos estados. El trayecto en sí puede cambiar su estado en tiempo de ejecución de Solicitado a Comenzado y de Comenzado a FinalizadoCorrectamente. Permite que a futuro, si se profundiza en comportamientos/acciones que se vean afectados por el estado del trayecto, estos se puedan añadir sin inconvenientes.
	2.1-	Patrón Strategy: fue aplicado con las Alertas y los distintos tipos de alertas que puede elegir el transeúnte en caso de emergencia. Se modelo la Alerta como una interface y a las distintas alertas que existen hasta ahora como clases concretas; todas realizan la misma acción pero con un algoritmo distinto, siendo la clase Transeúnte quien toma el rol de Contexto.
	2.2-	Patron Strategy: fue aplicado en el modelado de los modos de viaje. ModoDeViaje es una interface y los distintos modos son clases concretas. Todas estas clases poseen distintos algoritmos para resolver las mismas funciones (demoraSegúnModo y esperarTiempoDeDemora).
	3-	Patrón Adapter: fue aplicado con la interface CalculadoraDistancia y el AdapterConcreto DistanciaMatrixAPI. No es de interés de momento saber como calcula la distancia DistanciaMatrixAPI, pero esta se encarga de acoplar los componentes externos al dominio. Quien hace el rol de "cliente" es el Trayecto.
