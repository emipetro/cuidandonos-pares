@startuml Diagrama Cuidandonos

    class Transeunte{
        -nombreCompleto : String
        -direccion : String
        -edad : Integer
        -sexo : Sexo
        -trayectoAsociado : Trayecto
        -numeroDeTelefono : String
        -alertaConfigurada : Alerta
        -trayectosRealizados : List<Trayecto>

        +apretarBotonComenzarViaje() : void
        +apretarBotonCompleteTramo(Integer) : void
        +apretarBotonLlegueBien() : void
        +apretarBotonElegirModoViaje() : ModoDeViaje

        +ejecutarAlerta() : void

        +quieroViajar(Ubicacion, List<Ubicacion>, List<Cuidador>) : void
        +comenzarViaje() : void
    }

    enum Sexo{
        FEMENINO,
        MASCULINO,
        OTRO
    }

    class Ubicacion{
        -latitud : String
        -longitud : String
    }

    class Cuidador{
        -nombreCompleto : String
        -direccion : String
        -edad : Integer
        -sexo : Sexo
        -numeroDeTelefono : String
        -trayectosRealizados : List<Trayecto>
        -trayectoAsociado : Trayecto

        +recibirNotificacion(String) : void
        +quiereHacerTrayecto(Trayecto) : boolean
    }

    class Trayecto{
        -transeunte : Transeunte
        -cuidadores : List<Cuidador>
        -modoDeViaje : ModoDeViaje
        -tramos : List<Tramo>
        -historialEstados : List<Estado>

        +calcularDemora() : double
        +estadoActual() : Estado 
    }

    class Tramo{
        -inicio : Ubicacion
        -destino : Ubicacion
        -calculadoraDistancia : CalculadoraDistancia
        -tramoCompleto : boolean

        +calcularDemoraTramo() : double
    }

    class Estado{
        -estado : PosibleEstado
        -tiempo : LocalDateTime
    }

    class PosibleEstado{
        -nombre : String
    }

    interface ModoDeViaje{
        +demoraSegunModo(Trayecto) : double
        +esperarTiempoDeDemora(Trayecto) : void
    }

    class ViajeNormal{
        +demoraSegunModo(Trayecto) : double
        +esperarTiempoDeDemora(Trayecto) : void
    }

    class IrAvisando{
        +demoraSegunModo(Trayecto) : double
        +esperarTiempoDeDemora(Trayecto) : void
    }

    class DetenerseNMinutos{
        -minutosDetenido : Integer

        +demoraSegunModo(Trayecto) : double
        +esperarTiempoDeDemora(Trayecto) : void
    }

    interface CalculadoraDistancia{
        +calcularDistancia(Ubicacion, Ubicacion) : float
    }

    class DistanciaMatrixAPI{
        +calcularDistancia(Ubicacion, Ubicacion) : float
    }

    interface Alerta{
        +alertar(Transeunte) : void
    }

    class AlertaACuidadores{
        +alertar(Transeunte) : void
    }

    class AlertaAPolicia{
        -numeroPolicia : String
        +alertar(Transeunte) : void
    }

    class Esperar{
        -minutosDeEspera : Integer
        -alertaSecundaria : Alerta
        +alertar(Transeunte) : void
    }

    class LlamarACelular{
        +alertar(Transeunte) : void
    }

Transeunte --> Sexo
Trayecto --* Transeunte
Trayecto -->"*" Cuidador
Transeunte --> Ubicacion
Trayecto -->"*" Ubicacion
Trayecto..>ModoDeViaje
Trayecto-->"*"Estado
Estado-->PosibleEstado
ViajeNormal..|>ModoDeViaje
IrAvisando..|>ModoDeViaje
DetenerseNMinutos..|>ModoDeViaje
Transeunte ..> Alerta
AlertaACuidadores ..|> Alerta
AlertaAPolicia ..|> Alerta
Esperar ..|> Alerta
LlamarACelular ..|> Alerta
DistanciaMatrixAPI ..|> CalculadoraDistancia
Trayecto ..> CalculadoraDistancia
Trayecto-->"*"Tramo


@enduml